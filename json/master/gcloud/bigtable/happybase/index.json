{
  "description": "\n Google Cloud Bigtable HappyBase package.\n This package is intended to emulate the HappyBase library using Google Cloud Bigtable as the backing store.\n Differences in Public API -------------------------\n Some concepts from HBase/Thrift do not map directly to the Cloud Bigtable API. As a result\n * Table.regions() <gcloud.bigtable.happybase.table.Table.regions> could not be implemented since tables in Cloud Bigtable do not expose internal storage details * Connection.enable_table() <gcloud.bigtable.happybase.connection.Connection.enable_table> does nothing since Cloud Bigtable has no concept of enabled/disabled * Connection.disable_table() <gcloud.bigtable.happybase.connection.Connection.disable_table> does nothing since Cloud Bigtable has no concept of enabled/disabled * Connection.is_table_enabled() <gcloud.bigtable.happybase.connection.Connection.is_table_enabled> always returns :data:True since Cloud Bigtable has no concept of enabled/disabled * Connection.compact_table() <gcloud.bigtable.happybase.connection.Connection.compact_table> does nothing since Cloud Bigtable handles table compactions automatically and does not expose an API for it * The <code>__version__</code> value for the HappyBase package is :data:None. However, it's worth nothing this implementation was based off HappyBase 0.9.\n In addition, many of the constants from connection <gcloud.bigtable.happybase.connection> are specific to HBase and are defined as :data:None in our module:\n * <code>COMPAT_MODES</code> * <code>THRIFT_TRANSPORTS</code> * <code>THRIFT_PROTOCOLS</code> * <code>DEFAULT_HOST</code> * <code>DEFAULT_PORT</code> * <code>DEFAULT_TRANSPORT</code> * <code>DEFAULT_COMPAT</code> * <code>DEFAULT_PROTOCOL</code>\n Two of these <code>DEFAULT_HOST</code> and DEFAULT_PORT, are even imported in the main happybase <gcloud.bigtable.happybase> package.\n Finally, we do not provide the <code>util</code> module. Though it is public in the HappyBase library, it provides no core functionality.\n API Behavior Changes --------------------\n * Since there is no concept of an enabled / disabled table, calling Connection.delete_table() <gcloud.bigtable.happybase.connection.Connection.delete_table> with <code>disable=True</code> can't be supported. Using that argument will result in a warning. * The Connection <gcloud.bigtable.happybase.connection.Connection> constructor <b>disables</b> the use of several arguments and will print a warning if any of them are passed in as keyword arguments. The arguments are:\n<pre><code>  * ``host``\n  * ``port``\n  * ``compat``\n  * ``transport``\n  * ``protocol``\n* In order to make\n  :class:`Connection <gcloud.bigtable.happybase.connection.Connection>`\n  compatible with Cloud Bigtable, we add a ``instance`` keyword argument to\n  allow users to pass in their own\n  :class:`Instance <gcloud.bigtable.instance.Instance>` (which they can\n  construct beforehand).\n</code></pre>\n<pre><code>  For example:\n</code></pre>\n<pre><code>  .. code:: python\n</code></pre>\n<pre><code>      from gcloud.bigtable.client import Client\n      client = Client(project=PROJECT_ID, admin=True)\n      instance = client.instance(instance_id, location_id)\n      instance.reload()\n</code></pre>\n<pre><code>      from gcloud.bigtable.happybase import Connection\n      connection = Connection(instance=instance)\n</code></pre>\n * Any uses of the <code>wal</code> (Write Ahead Log) argument will result in a warning as well. This includes uses in:\n<pre><code>  * :class:`Batch <gcloud.bigtable.happybase.batch.Batch>`\n  * :meth:`Batch.put() <gcloud.bigtable.happybase.batch.Batch.put>`\n  * :meth:`Batch.delete() <gcloud.bigtable.happybase.batch.Batch.delete>`\n  * :meth:`Table.put() <gcloud.bigtable.happybase.table.Table.put>`\n  * :meth:`Table.delete() <gcloud.bigtable.happybase.table.Table.delete>`\n  * :meth:`Table.batch() <gcloud.bigtable.happybase.table.Table.batch>` factory\n* When calling\n  :meth:`Connection.create_table()       <gcloud.bigtable.happybase.connection.Connection.create_table>`, the\n  majority of HBase column family options cannot be used. Among\n</code></pre>\n<pre><code>  * ``max_versions``\n  * ``compression``\n  * ``in_memory``\n  * ``bloom_filter_type``\n  * ``bloom_filter_vector_size``\n  * ``bloom_filter_nb_hashes``\n  * ``block_cache_enabled``\n  * ``time_to_live``\n</code></pre>\n<pre><code>  Only ``max_versions`` and ``time_to_live`` are availabe in Cloud Bigtable\n  (as\n  :class:`MaxVersionsGCRule <gcloud.bigtable.column_family.MaxVersionsGCRule>`\n  and\n  :class:`MaxAgeGCRule <gcloud.bigtable.column_family.MaxAgeGCRule>`).\n</code></pre>\n<pre><code>  In addition to using a dictionary for specifying column family options,\n  we also accept instances of :class:`.GarbageCollectionRule` or subclasses.\n* :meth:`Table.scan() <gcloud.bigtable.happybase.table.Table.scan>` no longer\n  accepts the following arguments (which will result in a warning):\n</code></pre>\n<pre><code>  * ``batch_size``\n  * ``scan_batching``\n  * ``sorted_columns``\n</code></pre>\n * Using a HBase filter string in Table.scan() <gcloud.bigtable.happybase.table.Table.scan> is not possible with Cloud Bigtable and will result in a TypeError <exceptions.TypeError>. However, the method now accepts instances of .RowFilter and subclasses. * Batch.delete() <gcloud.bigtable.happybase.batch.Batch.delete> (and hence Table.delete() <gcloud.bigtable.happybase.table.Table.delete>) will fail with a ValueError <exceptions.ValueError> when either a row or column family delete is attempted with a <code>timestamp</code>. This is because the Cloud Bigtable API uses the <code>DeleteFromFamily</code> and <code>DeleteFromRow</code> mutations for these deletes, and neither of these mutations support a timestamp.", 
  "examples": [], 
  "id": "gcloud.bigtable.happybase.__init__", 
  "methods": [
    {
      "examples": [], 
      "exceptions": [], 
      "id": "gcloud.bigtable.happybase.__init__.DEFAULT_HOST", 
      "name": "DEFAULT_HOST", 
      "params": [], 
      "returns": [], 
      "source": "", 
      "type": "instance"
    }, 
    {
      "examples": [], 
      "exceptions": [], 
      "id": "gcloud.bigtable.happybase.__init__.DEFAULT_PORT", 
      "name": "DEFAULT_PORT", 
      "params": [], 
      "returns": [], 
      "source": "", 
      "type": "instance"
    }
  ], 
  "name": "__Init__", 
  "source": "/home/travis/build/GoogleCloudPlatform/gcloud-python/.tox/json-docs/lib/python2.7/site-packages/gcloud/__init__.py/gcloud/__init__.py"
}