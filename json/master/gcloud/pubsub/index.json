{
  "description": "\n Google Cloud Pubsub API wrapper.\n The main concepts with this API are:\n - <a data-custom-type=\"gcloud/pubsub/topic/topic\">gcloud.pubsub.topic.Topic</a> represents an endpoint to which messages can be published using the Cloud Storage Pubsub API.\n - <a data-custom-type=\"gcloud/pubsub/subscription/subscription\">gcloud.pubsub.subscription.Subscription</a> represents a named subscription (either pull or push) to a topic.", 
  "examples": [
    {
      "caption": "List topics for the default project:", 
      "code": "# client_list_topics\n    topics, token = client.list_topics()   # API request\n    while True:\n        for topic in topics:\n            do_something_with(topic)\n        if token is None:\n            break\n        topics, token = client.list_topics(page_token=token)  # API request\n"
    }, 
    {
      "caption": "List all subscriptions for the default project:", 
      "code": "# client_list_subscriptions\n    subscriptions, token = client.list_subscriptions()   # API request\n    while True:\n        for subscription in subscriptions:\n            do_something_with(subscription)\n        if token is None:\n            break\n        subscriptions, token = client.list_subscriptions(\n            page_token=token)                           # API request\n"
    }, 
    {
      "caption": "Create a new topic for the default project:", 
      "code": "# topic_create\n    topic = client.topic(TOPIC_NAME)\n    topic.create()              # API request\n"
    }, 
    {
      "caption": "Check for the existence of a topic:", 
      "code": "# topic_exists\n    assert not topic.exists()   # API request\n    topic.create()              # API request\n    assert topic.exists()       # API request\n"
    }, 
    {
      "caption": "Delete a topic:", 
      "code": "# topic_delete\n    assert topic.exists()       # API request\n    topic.delete()\n    assert not topic.exists()   # API request\n"
    }, 
    {
      "caption": "Fetch the IAM policy for a topic:", 
      "code": "# topic_get_iam_policy\n    policy = topic.get_iam_policy()             # API request\n"
    }, 
    {
      "caption": "Update the IAM policy for a topic:", 
      "code": "# topic_set_iam_policy\n    ALL_USERS = policy.all_users()\n    policy.viewers.add(ALL_USERS)\n    LOGS_GROUP = policy.group('cloud-logs@google.com')\n    policy.editors.add(LOGS_GROUP)\n    new_policy = topic.set_iam_policy(policy)   # API request\n"
    }, 
    {
      "caption": "Test permissions allowed by the current IAM policy on a topic:", 
      "code": "# topic_check_iam_permissions\n    from gcloud.pubsub.iam import OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE\n    TO_CHECK = [OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE]\n    ALLOWED = topic.check_iam_permissions(TO_CHECK)\n    assert set(ALLOWED) == set(TO_CHECK)\n"
    }, 
    {
      "caption": "Publish a single message to a topic, without attributes:", 
      "code": "# topic_publish_simple_message\n    topic.publish(b'This is the message payload')               # API request\n"
    }, 
    {
      "caption": "Publish a single message to a topic, with attributes:", 
      "code": "# topic_publish_message_with_attrs\n    topic.publish(b'Another message payload', extra='EXTRA')    # API request\n"
    }, 
    {
      "caption": "Create a new pull subscription for a topic, with defaults:", 
      "code": "# topic_subscription_defaults\n    sub_defaults = topic.subscription(SUB_DEFAULTS)\n"
    }, 
    {
      "caption": "Create a new pull subscription for a topic with a non-default ACK deadline:", 
      "code": "# topic_subscription_ack90\n    sub_ack90 = topic.subscription(SUB_ACK90, ack_deadline=90)\n"
    }, 
    {
      "caption": "List subscriptions for a topic:", 
      "code": "# topic_list_subscriptions\n    subscriptions, token = topic.list_subscriptions()   # API request\n    while True:\n        for subscription in subscriptions:\n            do_something_with(subscription)\n        if token is None:\n            break\n        subscriptions, token = topic.list_subscriptions(\n            page_token=token)                           # API request\n"
    }, 
    {
      "caption": "Create a new push subscription for a topic:", 
      "code": "# topic_subscription_push\n    subscription = topic.subscription(SUB_PUSH, push_endpoint=PUSH_URL)\n    subscription.create()               # API request\n"
    }, 
    {
      "caption": "Convert a push subscription to pull:", 
      "code": "# subscription_push_pull\n    subscription.modify_push_configuration(push_endpoint=None)  # API request\n"
    }, 
    {
      "caption": "Convert a pull subscription to push:", 
      "code": "# subscription_pull_push\n    subscription.modify_push_configuration(\n        push_endpoint=PUSH_URL)                                 # API request\n"
    }, 
    {
      "caption": null, 
      "code": "# subscription_create\n    subscription = topic.subscription(SUB_NAME)\n    subscription.create()                               # API request\n"
    }, 
    {
      "caption": "Check for the existence of a subscription:", 
      "code": "# subscription_exists\n    assert subscription.exists()                        # API request\n"
    }, 
    {
      "caption": "Re-synchronize a subscription with the back-end:", 
      "code": "# subscription_reload\n    subscription.reload()                               # API request\n"
    }, 
    {
      "caption": "Delete a subscription:", 
      "code": "# subscription_delete\n    subscription.delete()                               # API request\n"
    }, 
    {
      "caption": "Fetch messages for a pull subscription without blocking (none pending):", 
      "code": "# subscription_pull_return_immediately\n    pulled = subscription.pull(return_immediately=True)\n"
    }, 
    {
      "caption": "Fetch pending messages for a pull subscription:", 
      "code": "# subscription_pull\n    pulled = subscription.pull(max_messages=2)\n"
    }, 
    {
      "caption": "Update the acknowlegement deadline for pulled messages:", 
      "code": "# subscription_modify_ack_deadline\n    for ack_id, _ in pulled:\n        subscription.modify_ack_deadline(ack_id, 90)    # API request\n"
    }, 
    {
      "caption": "will re-send them later:", 
      "code": "# subscription_acknowledge\n    for ack_id, message in pulled:\n        try:\n            do_something_with(message)\n        except ApplicationException as e:\n            log_exception(e)\n        else:\n            subscription.acknowledge([ack_id])\n"
    }, 
    {
      "caption": "Publish a set of messages to a topic (as a single request):", 
      "code": "# topic_batch\n    with topic.batch() as batch:\n        batch.publish(PAYLOAD1)\n        batch.publish(PAYLOAD2, extra=EXTRA)\n"
    }, 
    {
      "caption": "error:", 
      "code": "# subscription_pull_autoack\n    from gcloud.pubsub.subscription import AutoAck\n    with AutoAck(subscription, max_messages=10) as ack:\n        for ack_id, message in list(ack.items()):\n            try:\n                do_something_with(message)\n            except Exception:  # pylint: disable=broad-except\n                del ack[ack_id]\n"
    }, 
    {
      "caption": "Fetch the IAM policy for a subscription", 
      "code": "# subscription_get_iam_policy\n    policy = subscription.get_iam_policy()             # API request\n"
    }, 
    {
      "caption": "Update the IAM policy for a subscription:", 
      "code": "# subscription_set_iam_policy\n    ALL_USERS = policy.all_users()\n    policy.viewers.add(ALL_USERS)\n    LOGS_GROUP = policy.group('cloud-logs@google.com')\n    policy.editors.add(LOGS_GROUP)\n    new_policy = subscription.set_iam_policy(policy)   # API request\n"
    }, 
    {
      "caption": "Test permissions allowed by the current IAM policy on a subscription:", 
      "code": "# subscription_check_iam_permissions\n    from gcloud.pubsub.iam import OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE\n    TO_CHECK = [OWNER_ROLE, EDITOR_ROLE, VIEWER_ROLE]\n    ALLOWED = subscription.check_iam_permissions(TO_CHECK)\n    assert set(ALLOWED) == set(TO_CHECK)\n"
    }
  ], 
  "id": "gcloud.pubsub.__init__", 
  "methods": [
    {
      "examples": [], 
      "exceptions": [], 
      "id": "gcloud.pubsub.__init__.SCOPE", 
      "name": "SCOPE", 
      "params": [], 
      "returns": [], 
      "source": "", 
      "type": "instance"
    }
  ], 
  "name": "__Init__", 
  "source": "/home/travis/build/GoogleCloudPlatform/gcloud-python/.tox/json-docs/lib/python2.7/site-packages/gcloud/__init__.py/gcloud/__init__.py"
}