{
  "description": "\n Manipulate access control lists that Cloud Storage provides.\n <a data-custom-type=\"gcloud/storage/bucket/bucket\">gcloud.storage.bucket.Bucket</a> has a getting method that creates an ACL object under the hood, and you can interact with that using <a data-custom-type=\"gcloud/storage/bucket/bucket/acl\">gcloud.storage.bucket.Bucket.acl</a>\n<pre><code>  >>> from gcloud import storage\n  >>> client = storage.Client()\n  >>> bucket = client.get_bucket(bucket_name)\n  >>> acl = bucket.acl\n</code></pre>\n Adding and removing permissions can be done with the following methods (in increasing order of granularity):\n - ACL.all corresponds to access for all users. - ACL.all_authenticated corresponds to access for all users that are signed into a Google account. - ACL.domain corresponds to access on a per Google Apps domain (ie, example.com). - ACL.group corresponds to access on a per group basis (either by ID or e-mail address). - ACL.user corresponds to access on a per user basis (either by ID or e-mail address).\n And you are able to <code>grant</code> and <code>revoke</code> the following roles:\n - **Reading**: _ACLEntity.grant_read and _ACLEntity.revoke_read - **Writing**: _ACLEntity.grant_write and _ACLEntity.revoke_write - **Owning**: _ACLEntity.grant_owner and _ACLEntity.revoke_owner\n You can use any of these like any other factory method (these happen to be _ACLEntity factories)\n<pre><code>  >>> acl.user('me@example.org').grant_read()\n  >>> acl.all_authenticated().grant_write()\n</code></pre>\n You can also chain these <code>grant_*</code> and <code>revoke_*</code> methods together for brevity\n<pre><code>  >>> acl.all().grant_read().revoke_write()\n</code></pre>\n After that, you can save any changes you make with the <a data-custom-type=\"gcloud/storage/acl/acl/save\">gcloud.storage.acl.ACL.save</a> method\n<pre><code>  >>> acl.save()\n</code></pre>\n You can alternatively save any existing <a data-custom-type=\"gcloud/storage/acl/acl\">gcloud.storage.acl.ACL</a> object (whether it was created by a factory method or not) from a <a data-custom-type=\"gcloud/storage/bucket/bucket\">gcloud.storage.bucket.Bucket</a>\n<pre><code>  >>> bucket.acl.save(acl=acl)\n</code></pre>\n To get the list of <code>entity</code> and <code>role</code> for each unique pair, the ACL class is iterable\n<pre><code>  >>> print list(ACL)\n  [{'role': 'OWNER', 'entity': 'allUsers'}, ...]\n</code></pre>\n This list of tuples can be used as the <code>entity</code> and <code>role</code> fields when sending metadata for ACLs to the API.", 
  "examples": [], 
  "id": "gcloud.storage.acl", 
  "methods": [], 
  "name": "Acl", 
  "source": "/home/travis/build/GoogleCloudPlatform/gcloud-python/.tox/json-docs/lib/python2.7/site-packages/gcloud/__init__.py/gcloud/__init__.py"
}